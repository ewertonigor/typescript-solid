entities -> Códigos que geram dinheiro para o negócio.
services -> Serviços internos
main -> Parte mais suja do código

->  Single Responsibility Principle (Princípio da responsabilidade única)
     - UMA CLASSE SÓ TEM UM E APENAS UM MOTIVO PARA MUDAR
     - A MINHA CLASSE SÓ DEVE TER APENAS UMA RESPONSABILIDADE

-> Open/Closed Principle (Princípio do aberto/fechado)
      - Entidades (Classes, Funções, Métodos), devem estar abertas para extensão mas fechadas para modificações.

--> Liskov Substitution Principle (Princípio da Substituição de Liskov)
      - Subtipos precisam ser substituives por seus tipos de base.
      - Se meu programa espera um Animal, algo do tipo (Dog) -> (Que herda de Animal) deve servir como qualquer outro Animal.
