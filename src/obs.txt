entities -> Códigos que geram dinheiro para o negócio.
services -> Serviços internos
main -> Parte mais suja do código

->  Single Responsibility Principle (Princípio da responsabilidade única)
     - UMA CLASSE SÓ TEM UM E APENAS UM MOTIVO PARA MUDAR
     - A MINHA CLASSE SÓ DEVE TER APENAS UMA RESPONSABILIDADE

-> Open/Closed Principle (Princípio do aberto/fechado)
      - Entidades (Classes, Funções, Métodos), devem estar abertas para extensão mas fechadas para modificações.

-> Liskov Substitution Principle (Princípio da Substituição de Liskov)
      - Subtipos precisam ser substituives por seus tipos de base.
      - Se meu programa espera um Animal, algo do tipo (Dog) -> (Que herda de Animal) deve servir como qualquer outro Animal.

-> Interface Segregation Principle (Princípio da Segregação de Interfaces)
      - Os clientes não devem ser forçados a depender de types, interfaces ou membros abstratos que não utilizam.

-> Dependency Inversion Principle (Princípio da Inversão de Dependência)
      - Módulos de alto nivel não devem depender de módulos de baixo nivel. Ambos devem depender de abstrações.
      - Dependa de abstrações, não de implementações.
      - Abstrações não devem depender de detalhes. Detalhes devem depender de abstrações.

      - Classes de baixo nível são classes que executam tarefas (os detalhes).
      - Classes de alto nível são classes que gerenciam as classes de baixo nível.
